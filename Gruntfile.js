/**
 * all paths point to to the TARGET directory, because that is that path
 * generated by maven and those files are used to create web-resources.jar
 **/
module.exports = function (grunt) {

	// Project configuration.
	grunt.initConfig({
		pkg: grunt.file.readJSON('package.json'),

		SRC_PATH: './src/',
		BUILD_PATH: './target/',

		/**
		 * Used to remove files or directories
		 */
		clean: {
			target: ['<%= BUILD_PATH %>'], //build files
		},

		/**
		 * Used to copy files or directories
		 */
		copy: {
			target: {
				files: [{ // Copy source into build folder for further manipulation
					expand: true,
					cwd: '<%= SRC_PATH %>',
					src: ['**'],
					dest: '<%= BUILD_PATH %>'
				}]
			}
		},

		/**
		 * Used to minify css files, and takes any @import references and concats the into that same file
		 */
		cssmin: {
			target: {
				files: [{
					expand: true,
					cwd: '<%= SRC_PATH %>' + 'css/',
					src: ['*.css'],
					dest: '<%= BUILD_PATH %>' + 'css/'
				}]
			}
		},

		/**
		 * Used to minify javascript files or directories.
		 * By not specifying a destination directory, it will overwrite the source file
		 */
		uglify: {
			target: {
				files: [{
					expand: true,
					src: '<%= BUILD_PATH %>' + 'js/**/*.js'
				}]
			}
		},

		/**
		 * The RequireJS plugin that will use uglify2 to build and minify our
		 * JavaScript, templates and any other data we include in the require files.
		 */
		requirejs: {
			compile: {
				options: {
					appDir: '<%= SRC_PATH %>',
					baseUrl: 'js', // Path of source scripts, relative to this build file
					mainConfigFile: '<%= SRC_PATH %>' + 'js/main.js', // Path of shared configuration file, relative to this build file
					dir: '<%= BUILD_PATH %>',
					keepBuildDir: true,
					useStrict: true,
					preserveLicenseComments: false,
					findNestedDependencies: true,
					// generateSourceMaps: true,
					inlineText: true,
					// stubModules: [],
					pragmas: {
						debugExclude: true
					},

					modules: [{
						name: 'core'
					},{
						name: 'router',
						exclude: ['core']
					}],

					optimize: 'uglify2', // Use 'none' If you do not want to uglify.
					uglify2: {
						output: {
							beautify: false,
							comments: false
						},
						compress: {
							sequences: false,
							global_defs: {
								DEBUG: false
							}
						},
						warnings: false,
						mangle: true
					}
				}
			}
		},

		jsbeautifier: {
			modify: {
				src: ['Gruntfile.js', '<%= SRC_PATH %>' + '**/*.js', '!<%= SRC_PATH %>' + 'lib/**/*.js'], //exclude lib directory
				options: {
					config: '.jsbeautifyrc'
				}
			},
			verify: {
				src: ['Gruntfile.js', '<%= SRC_PATH %>' + '**/*.js', '!<%= SRC_PATH %>' + 'lib/**/*.js'],
				options: {
					mode: 'VERIFY_ONLY',
					config: '.jsbeautifyrc'
				}
			}
		},

		jshint: {
			all: ['<%= SRC_PATH %>' + '**/*.js'],
			options: {
				reporter: 'jslint',
				reporterOutput: 'hintresults.xml',
				force: false, //to not fail the task if errors are encoutered
				jshintrc: '.jshintrc',
				ignores: [
					'<%= SRC_PATH %>' + 'lib/**/*.js'
				]
			}
		},

		karma: {
			unit: {
				configFile: './test/karma.config.js',
				autoWatch: true
			}
		},

		docker: {
			app: {
				expand: true,
				src: ['<%= SRC_PATH %>' + '**/*.js', '<%= SRC_PATH %>' + '**/*.css', '<%= SRC_PATH %>' + '**/*.html'],
				dest: 'doc',
				options: {
					onlyUpdated: false,
					colourScheme: 'default',
					ignoreHidden: false,
					sidebarState: true,
					exclude: '<%= SRC_PATH %>' + 'lib/**/*',
					lineNums: true,
					js: [],
					css: [],
					extras: ['fileSearch', 'goToLine']
				}
			}
		}

	});

	grunt.loadNpmTasks('grunt-contrib-cssmin'); //css minification plugin
	grunt.loadNpmTasks('grunt-contrib-htmlmin'); //HTML minification plugin
	grunt.loadNpmTasks('grunt-contrib-uglify'); //JS minification
	grunt.loadNpmTasks('grunt-contrib-requirejs'); //RequireJS optimization
	grunt.loadNpmTasks('grunt-contrib-clean'); //empty directory contents
	grunt.loadNpmTasks('grunt-contrib-copy'); //copy directory contents
	grunt.loadNpmTasks('grunt-contrib-concat'); //create bundles
	grunt.loadNpmTasks('grunt-jsbeautifier'); //formatting code
	grunt.loadNpmTasks('grunt-contrib-jshint'); //for hinting code quality
	grunt.loadNpmTasks('grunt-karma'); //cross-browser execution of unit tests
	grunt.loadNpmTasks('grunt-docker'); //automated process to document src code

	// Default task.
	grunt.registerTask('default', 'show options', function () {
		grunt.log.writeln('\nThese are your options:\n');
		grunt.log.writeln('validate  <------- ensures code quality before checking in by code formatting, JSHint, and unit tests\n');
		grunt.log.writeln('document  <------- document the source code\n');
		grunt.log.writeln('optimize  <------- bundles and minifies applicable static files for optimal page performance\n');
	});

	grunt.registerTask('validate', function () {
		grunt.task.run(['jsbeautifier:modify', 'hint', 'karma']);
	});

	grunt.registerTask('document', function () {
		grunt.task.run(['docker']);
	});

	grunt.registerTask('optimize', function () {
		grunt.log.writeln('cleaning build target');
		grunt.task.run(['clean:target']);

		grunt.log.writeln('copying files to build target');
		grunt.task.run(['copy:target']);

		grunt.log.writeln('optimizing files');
		grunt.task.run(['cssmin', 'requirejs', 'uglify']);
	});

	grunt.registerTask('format', ['jsbeautifier:modify']);
	grunt.registerTask('hint', ['jshint']);
	grunt.registerTask('karmatest', ['karma']);
};
